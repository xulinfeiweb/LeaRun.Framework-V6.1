<?xml version="1.0" encoding="utf-8"?>
<unity>
  <typeAliases>
    <typeAlias alias="IDatabase" type="LeaRun.Data.IDatabase,LeaRun.Data" />
    <typeAlias alias="EFDatabase" type="LeaRun.Data.EF.Database,LeaRun.Data.EF" />
    <typeAlias alias="IDbContext" type="LeaRun.Data.EF.IDbContext,LeaRun.Data.EF" />
    <typeAlias alias="MySql" type="LeaRun.Data.EF.MySqlDbContext,LeaRun.Data.EF" />
    <typeAlias alias="SqlServer" type="LeaRun.Data.EF.SqlServerDbContext,LeaRun.Data.EF" />
  </typeAliases>
  <containers>
    <container name="DBcontainer">
      <type type="IDatabase" mapTo="EFDatabase" ></type >
      <!-- 默认数据库软件类型：SqlServer,MySql,Oracle,Access,SQLite-->
      <type type="IDbContext" mapTo="SqlServer" ></type >
      <type type="IDbContext" mapTo="SqlServer" name="SqlServer"></type >
      <type type="IDbContext" mapTo="MySql" name="MySql"></type >
    </container>
  </containers>
</unity>

<!--　配置过unity的朋友看一下可能就清楚，这边我们再简单说下：
Unity的配置节的名称为”Unity"，节处理程序的类型为 Microsoft.Practices.Unity.Configuration.UnityConfigurationSection，它包含在程序集Microsoft.Practices.Unity.Configuration 中，当前程序添加该程序集的引用。
typeAliases管理生命周期类型，以及一些类型别名的设置，方便我们映射对象的编写，比如同一个类型注册多次，我们只要在typeAlias添加一个类型别名，这样我们再添加这个类型映射的时候只要写个别名就可以了。
containers是容器container集合，我们可以配置多个容器类型，通过Name属性就可以访问，比如访问defaultContainer容器代码：configuration.Configure(container, "defaultContainer");
container为容器管理，下面包含多个类型映射，我们平常使用的构造器注册、属性注册和方法注册，就可以在constructor、property、method节点进行配置。-->